
-- A log table to record new prescription transactions
CREATE TABLE Prescription_Log (                                                 -- automatically create new prescription log table to store logs whenever new prescription is created
    LogID           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,        -- assign unique log id to each new log, must be filled
    PrescriptionID  NUMBER NOT NULL,                                            -- define corresponding prescription id , must be filled
    AppointmentID   NUMBER NOT NULL,                                            -- define corresponding appointment id for each new prescription, must be filled
    LogMessage      VARCHAR(500),                                               -- define log message holder
    LogDate         DATE DEFAULT SYSDATE NOT NULL                               -- define log date for tracing possibly the time series of events, must be filled
);



-- A trigger to prevent updating prescription notes for incomplete appointments
CREATE OR REPLACE TRIGGER trg_prescription_notes_update                             -- define trigger name
BEFORE UPDATE OF Notes ON Prescription                                              -- Trigger fires before updating the 'Notes' column in Prescription table
FOR EACH ROW                                                                        -- Row-level trigger: fires for each updated prescription record
DECLARE
    v_status Appointment.Status%TYPE;                                               -- Declare a variable to hold the status of the related appointment
BEGIN
    SELECT Status                                                                   -- Get the status of the related appointment
    INTO v_status                                                                   -- Store the appointment status into the variable
    FROM Appointment
    WHERE AppointmentID = :NEW.AppointmentID;                                       -- Match the appointment corresponding to the prescription being updated


    -- Check if the appointment is completed
    IF v_status != 'completed' THEN
        RAISE_APPLICATION_ERROR(-20001, 
            'Cannot update prescription notes: Appointment is not completed yet.');
    END IF;
END;


-- A trigger to log any new prescription being made with a date same as the one during prescription
CREATE OR REPLACE TRIGGER trg_prescription_insert_log                                   -- Creates or replaces a trigger for new prescriptions logs
AFTER INSERT ON Prescription                                                            -- after new prescription has been created
FOR EACH ROW                                                                            -- loop each newly created prescription
BEGIN                                                                                   -- start logging
    INSERT INTO Prescription_Log (PrescriptionID, AppointmentID, LogMessage, LogDate)   -- log into log table
    VALUES (
        :NEW.PrescriptionID,                                                            -- log the newly created prescription id
        :NEW.AppointmentID,                                                             -- log corresponding appointment
        'New prescription created for AppointmentID ' || :NEW.AppointmentID,            -- writr log message
        :NEW.DateIssued                                                                 -- uses the inserted prescription's date
    );
END;                                                                                    -- terminate logging if no new prescriptions exist


-- Warns about deleted records in the prescriptions table which references the appointment ID deleted
CREATE OR REPLACE TRIGGER After_Appointment_Delete           -- Create or replace the trigger with this name
AFTER DELETE ON Appointment        -- Fires after all deletions complete
DECLARE
    v_deleted_count NUMBER;        -- Variable to store total affected prescriptions
BEGIN
    -- Count how many prescriptions are now gone after the delete
    SELECT COUNT(*) INTO v_deleted_count
    FROM Prescription
    WHERE AppointmentID NOT IN (SELECT AppointmentID FROM Appointment); -- Optional: ensures counting removed ones

    -- Display a message
    DBMS_OUTPUT.PUT_LINE(
        'Delete completed. Some prescriptions related to deleted appointments may have been removed. '
        || 'Check Prescription table for details.'
    );
END;



