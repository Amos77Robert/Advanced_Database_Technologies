-- Create a table to store department information in the hospital
CREATE TABLE Department ( 
    DeptID          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,    -- automaticallu assign a unique primary key to identifier each department
    DepatName       VARCHAR (250) NOT NULL,                                 -- department name, attribute must be filled
    LocationName    VARCHAR (250) NOT NULL                                  -- location within the building such as floor number. The attribute must be filled
)

-- Create a table to store doctor information in the respective department
CREATE TABLE Doctor (
    DoctorID    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,        -- assign a unique primary key to identify each new dotor automatically 
    FullName    VARCHAR (100) NOT NULL,                                     -- to store doctor name, must be filed
    Specialty   VARCHAR (250) NOT NULL,                                     -- to store doctor's specialty field, must be filled
    DeptID      NUMBER NOT NULL,                                            -- referencing a department ID from department table, must be filled
    Phone       NUMBER(9),                                                  -- to store phone number, maximum of 10 digits including first zero
    Email       VARCHAR(100)  UNIQUE,                                       -- to store email of the doctor
    CONSTRAINT FK_Doctor_Department                                         -- define a foerign key constraint for integrity
        FOREIGN KEY (DeptID) REFERENCES Department (DeptID)                 -- ensure that the key is already present in the department table
);


-- Create a table to allow registering patient in the hospital registry database
CREATE TABLE Patient (
    PatientID   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,                -- assign a unique primary identifier to each new patient automatically
    FullName    VARCHAR (100) NOT NULL,                                             -- patient name, must be filled
    GENDER      VARCHAR (8) CHECK (Gender IN ('Male','Female')),                    -- patient gender, expected Male or Female only
    DOB         DATE DEFAULT SYSDATE NOT NULL,                                      -- date of birth, must be filled
    Contact     NUMBER (9) NOT NULL,                                                -- contact detail number, a maximum of 10 digits including first zero and must be filled
    Address     VARCHAR (250)                                                       -- location of the patient e.g. country or district
);

-- create a table to store new appointments that links a patient and doctor
CREATE TABLE Appointment(
    AppointmentID   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,            -- assign a unique primary identifier to each appointment automatically
    PatientID       NUMBER NOT NULL,                                                -- define a referenced key (patient id) which must first be already present in the patient table
    DoctorID        NUMBER NOT NULL,                                                -- define a referenced key (patient id) which must first be already present in the doctor table
    VisitDate       DATE DEFAULT SYSDATE NOT NULL,                                  -- define a date the patient visisted a doctor, must be filled
    Diagnosis       VARCHAR (500) NOT NULL,                                         -- doctor's diagnosis of the patient's health conditions, must be filled
    Status          VARCHAR (250) CHECK (Status IN ('completed', 'pending')),       -- only accepte completed or pending keywords which will be updated accordingly
    
    -- define corresponding foreign keys
    CONSTRAINT FK_Appointment_Doctor                                               
        FOREIGN KEY (DoctorID) REFERENCES Doctor(DoctorID),                         -- define foreign key (doctor id ) which must first be already present in the doctor table
    CONSTRAINT FK_Appointmet_Patient
        FOREIGN KEY (PatientID) REFERENCES Patient(PatientID)                       -- define foreign key (patient id) which must first be already present in the doctor table
);


-- create a table to store new prescriptions
CREATE TABLE Prescription (
    PrescriptionID      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,        -- assign unique primary identifier to new prescription for the appointment 
    AppointmentID       NUMBER NOT NULL,                                            -- define referenced key (appointment id) for the appointment which must first be already present in the appointment table
    Notes               VARCHAR (500),                                              -- doctor notes during consultation with the patient
    DateIssued          DATE DEFAULT SYSDATE NOT NULL,                              -- date when the consultation took place must be filled
    CONSTRAINT FK_Prescription_Appointment                                          -- define the foreing key constraint for integrity
        FOREIGN KEY (AppointmentID) REFERENCES Appointment(AppointmentID)           -- the key must be already present in the appointment table
        ON DELETE CASCADE                                                           -- the record cannot first be deleted in this table as long as it is present in the appointment table (parent)
);


-- Create a table to store medication for the appointment
CREATE TABLE Medication (
    MedID               NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,            -- automatically assign a unque primary medication identifier in the database for stocking
    PrescriptionID      NUMBER NOT NULL,                                                -- define referenced key for each prescription which must first be already present in the prescription table
    DrugName            VARCHAR (200) NOT NULL,                                         -- prescribed drug, must be filled
    Dosage              VARCHAR (500) NOT NULL,                                         -- define dosage, must be filled
    DurationN           VARCHAR (150) NOT NULL,                                         -- time to finish the dosage, must be filled
    Quantity            VARCHAR (150) NOT NULL,                                         -- quantity of each medication prescribed, must be filled
    CONSTRAINT FK_Medication_Prescription                                               -- define foreign key constraint for integrity
        FOREIGN KEY (PrescriptionID) REFERENCES Prescription (PrescriptionID)           -- the key must first be already present in the prescription table
        ON DELETE CASCADE                                                               -- the record cannot first be deleted in this table as long as it is present in the appointment table (parent)
);
-- select * from tab;







